<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
		<!-- 1.jdbc.properties -->
		<context:property-placeholder location="classpath:com/config/jdbc.properties"/>
	   
	   
		<!-- 2.db정보를 가지는 datasource 빈객체 생성 -->
  	 <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
      <property name="driverClassName" value="${oracle.jdbc}"></property>
      <property name="url" value="${oracle.url}"></property>
      <property name="username" value="${oracle.userid}"></property>
      <property name="password" value="${oracle.passwd}"></property>
     </bean>
     
     <!-- Transaction 설정 -->
     <!-- 3. Transaction 처리용 TransactionManager 등록 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 4. Transaction annotation 활성화 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
		<!-- 5.SqlSessionFactoryBean등록 - mapper지정 - alias지정  -->
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="dataSource" ref="dataSource"></property>
				<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
				<property name="typeAliasesPackage" value="com.dto"></property>
		</bean>
		
		<!-- 6. SqlSessionTemplate 등록 -->
		<!-- db정보를 자기는 datasource와 쿼리문을 작성하는 Mapper.xml이 있는 경로 설정하는 mapperLocations를 포함하는 빈 객체를 가지는 sqlSession Template 생성 (실제로 Mapper.java에서 주입을  통해  사용함) -->
		<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		</bean>
		
		<!-- 파일 업로드를 위한 MutipartResolver 구현체 CommonsMultipartResolver  bean 등록 -->
		<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
  			<property name="maxUploadSize" value="104857600"/>
  			<property name="maxUploadSizePerFile" value="104857600"/>
  			<property name="maxInMemorySize" value="104857600"/>
		</bean>
		
		
		
		
</beans>
